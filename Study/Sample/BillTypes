package project.mynotepad.data_manager;

import java.util.ArrayList;

import project.mynotepad.common_type.RecordItemDetails;
import project.mynotepad.datastructs.ControlCenter;

public class RecordItemDetailManager
{
	public static boolean LoadRecordItem(ArrayList<RecordItemDetails> arrRecordItemDetailsList)
	{
		return true;
	}

	public static boolean AddRecordItem(RecordItemDetails eNewItem)
	{
		return true;
	}

	public static boolean DeleteRecordItem(RecordItemDetails eItem)
	{
		return true;
	}

	public static boolean ModifyRecordItem(RecordItemDetails eItemBefore, RecordItemDetails eItemModify)
	{
		return true;
	}

	public static ArrayList<RecordItemDetails> GetSpecifiedDayList()
	{
		ArrayList<RecordItemDetails> arrayList = new ArrayList<>();
		
		return arrayList;
	}

	// 对从数据库中加载的数据进行一次整理，内部采用的是快速排序
	public static boolean OrderItemRecords()
	{
		ArrayList<RecordItemDetails> arrItemRecordsList = ControlCenter.GetRecordItemDetails();
		if(arrItemRecordsList == null)
			return false;

		QuickSort(arrItemRecordsList, 0, arrItemRecordsList.size() - 1);

		return true;
	}

	// 对数据库中加载出来的数据进行快速排序，排序是按时间从前到后排列
	private static void QuickSort(ArrayList<RecordItemDetails> compare, int left, int right)
	{
		int dp;
		if(left < right)
		{
			dp = Partition(compare, left, right);
			QuickSort(compare, left, dp - 1);
			QuickSort(compare, dp + 1, right);
		}
	}

	// 快速排序中需要用到的划分边界的函数
	private static int Partition(ArrayList<RecordItemDetails> arrItemsList, int left, int right)
	{
		RecordItemDetails pivot = arrItemsList.get(left);
		while(left < right)
		{
			while(left < right && DateTimeCompare(arrItemsList.get(right), pivot))
				right--;
			if(left < right)
				arrItemsList.get(left++).Instead(arrItemsList.get(right));
			while(left < right && DateTimeCompare(arrItemsList.get(left), pivot))
				left++;
			if(left < right)
				arrItemsList.get(right--).Instead(arrItemsList.get(left));
		}
		arrItemsList.get(left).Instead(pivot);
		return left;
	}

	// 决定详细数据排列的方式，按时间的从最近到最久的顺序
	private static boolean DateTimeCompare(RecordItemDetails first, RecordItemDetails second)
	{
		if(first.nYear > second.nYear)
			return true;
		else if(second.nYear > first.nYear)
			return false;

		if(first.nMonth > second.nMonth)
			return true;
		else if(second.nMonth > first.nMonth)
			return false;

		if(first.nDay > second.nDay)
			return true;
		else if(second.nDay > first.nDay)
			return false;

		if(first.nHour > second.nHour)
			return true;
		else if(second.nHour > first.nHour)
			return false;

		if(first.nMinute > second.nMinute)
			return true;
		else if(second.nMinute > first.nMinute)
			return false;

		return true;
	}
}
